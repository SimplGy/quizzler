// Generated by CoffeeScript 1.7.1
(function() {
  var gotQuizData, isLoggedIn, loginBtn, onLogIn, onLogOut, parseFacebookPosts, questions, questionsEl, showAllQuestions, showOneQuestion;

  isLoggedIn = false;

  loginBtn = document.getElementById('FacebookLogin');

  questionsEl = document.getElementById('Questions');

  questions = [];

  window.fbAsyncInit = function() {
    console.log('facebook ready');
    FB.init({
      appId: window.location.hostname === 'localhost' ? '1538582919703882' : '1538565359705638',
      xfbml: true,
      version: 'v2.0'
    });
    return FB.getLoginStatus(function(response) {
      if (response.status === 'connected') {
        return onLogIn();
      } else {
        return onLogOut();
      }
    });
  };

  loginBtn.onclick = function(evt) {
    evt.preventDefault();
    loginBtn.textContent = '...';
    if (isLoggedIn) {
      return FB.logout(onLogOut);
    } else {
      return FB.login(function(resp) {
        if (resp.authResponse) {
          console.log('Login successful');
          return onLogIn();
        } else {
          console.warn('User cancelled login or did not fully authorize.');
          return onLogOut();
        }
      });
    }
  };

  onLogIn = function() {
    isLoggedIn = true;
    loginBtn.textContent = 'Log Out';
    FB.api('me', function(resp) {
      return console.log({
        me: resp
      });
    });
    return FB.api('jsquizzler/statuses', gotQuizData);
  };

  onLogOut = function() {
    isLoggedIn = false;
    return loginBtn.textContent = 'Log In';
  };

  gotQuizData = function(resp) {
    console.log(resp.data);
    parseFacebookPosts(resp.data);
    return showOneQuestion();
  };

  parseFacebookPosts = function(posts) {
    var parsed, q, quizItem, _i, _len;
    for (_i = 0, _len = posts.length; _i < _len; _i++) {
      quizItem = posts[_i];
      parsed = {};
      parsed.A = quizItem.comments.data[0].message;
      q = quizItem.message.split('Q:\n');
      if (q.length === 2) {
        parsed.Q = markdown.toHTML(q[1]);
      }
      questions.push(parsed);
    }
    return questions;
  };

  showOneQuestion = function(idx) {
    idx = idx || 0;
    questionsEl.innerHTML = questions[idx].Q;
    return Prism.highlightAll();
  };

  showAllQuestions = function() {
    var markup, question, _i, _len;
    markup = '';
    for (_i = 0, _len = questions.length; _i < _len; _i++) {
      question = questions[_i];
      markup += question.Q;
    }
    questionsEl.innerHTML = markup;
    return Prism.highlightAll();
  };

}).call(this);
